openapi: 3.0.1
info:
  title: Cinema Booking System API
  version: 1.0.0
  description: API for managing cinema rooms, movies, screenings and bookings
  contact:
    name: API Support
    email: support@cinema.com
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: Users
    description: User authentication and registration
  - name: Rooms
    description: Cinema room management
  - name: Movies
    description: Movie management
  - name: Screenings
    description: Movie screening management
  - name: Bookings
    description: Seat booking management
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        username:
          type: string
          example: john_doe
        role:
          type: string
          enum: [user, admin]
          example: user
    Movie:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          example: Inception
        poster:
          type: string
          example: http://example.com/poster.jpg
        duration:
          type: number
          example: 148
        description:
          type: string
          example: A thief who steals corporate secrets...
    Room:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          example: Red Room
        rows:
          type: number
          example: 10
        seatsPerRow:
          type: number
          example: 8
        seats:
          type: array
          items:
            type: string
            example: A1
    Screening:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        movie:
          $ref: '#/components/schemas/Movie'
        room:
          $ref: '#/components/schemas/Room'
        startTime:
          type: string
          format: date-time
          example: 2023-12-15T18:00:00Z
        endTime:
          type: string
          format: date-time
          example: 2023-12-15T20:28:00Z
    Booking:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        screening:
          $ref: '#/components/schemas/Screening'
        seat:
          type: string
          example: A12
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [pending, confirmed, cancelled]
          example: confirmed
    Error:
      type: object
      properties:
        message:
          type: string
          example: Error message
        code:
          type: integer
          example: 400

paths:
  /user/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: milad
                password:
                  type: string
                  example: milad145
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/register-admin:
    post:
      tags: [Users]
      summary: Register a new admin (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin123
      responses:
        '201':
          description: Admin registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/login:
    post:
      tags: [Users]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: superadmin
                password:
                  type: string
                  example: admin123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Wrong username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /room:
    post:
      tags: [Rooms]
      summary: Create a new room (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, rows, seatsPerRow]
              properties:
                name:
                  type: string
                  example: White Room
                rows:
                  type: integer
                  minimum: 1
                  maximum: 26
                  example: 10
                seatsPerRow:
                  type: integer
                  minimum: 1
                  maximum: 50
                  example: 9
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicated room name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Rooms]
      summary: Get all rooms
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'

  /room/{id}:
    get:
      tags: [Rooms]
      summary: Get room details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room details
          content:
            application/json:
              schema:
                type: object
                properties:
                  room:
                    $ref: '#/components/schemas/Room'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Rooms]
      summary: Update room (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Room Name
                rows:
                  type: integer
                  minimum: 1
                  maximum: 26
                  example: 12
                seatsPerRow:
                  type: integer
                  minimum: 1
                  maximum: 50
                  example: 10
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  room:
                    $ref: '#/components/schemas/Room'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicated room name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Rooms]
      summary: Delete room (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movie:
    post:
      tags: [Movies]
      summary: Create a new movie (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, poster, duration]
              properties:
                name:
                  type: string
                  example: Matrix 1
                poster:
                  type: string
                  example: http://localhost:3000/poster/matrix1.jpg
                duration:
                  type: integer
                  minimum: 1
                  maximum: 300
                  example: 190
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicated movie name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Movies]
      summary: Get all movies
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'

  /movie/{id}:
    get:
      tags: [Movies]
      summary: Get movie details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Movies]
      summary: Update movie (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Movie Name
                poster:
                  type: string
                  example: http://example.com/new-poster.jpg
                duration:
                  type: integer
                  minimum: 1
                  maximum: 300
                  example: 150
                description:
                  type: string
                  example: Updated movie description
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicated movie name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Movies]
      summary: Delete movie (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /screening:
    post:
      tags: [Screenings]
      summary: Create a new screening (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [movieId, roomId, startTime]
              properties:
                movieId:
                  type: string
                  example: 507f1f77bcf86cd799439011
                roomId:
                  type: string
                  example: 507f1f77bcf86cd799439012
                startTime:
                  type: string
                  format: date-time
                  example: 2025-03-29T22:00:00Z
      responses:
        '201':
          description: Screening created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Screening'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Movie or Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Room already booked for this time slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Screenings]
      summary: Get all screenings
      responses:
        '200':
          description: List of screenings
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  screenings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Screening'

  /screening/movie/{movieId}:
    get:
      tags: [Screenings]
      summary: Get screenings by movie ID
      parameters:
        - name: movieId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of screenings for the movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  screenings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Screening'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /screening/room/{roomId}:
    get:
      tags: [Screenings]
      summary: Get screenings by room ID
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of screenings in the room
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  screenings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Screening'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /screening/{id}:
    get:
      tags: [Screenings]
      summary: Get screening details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Screening details
          content:
            application/json:
              schema:
                type: object
                properties:
                  screening:
                    $ref: '#/components/schemas/Screening'
        '404':
          description: Screening not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Screenings]
      summary: Update screening (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movieId:
                  type: string
                  example: 507f1f77bcf86cd799439011
                roomId:
                  type: string
                  example: 507f1f77bcf86cd799439012
                startTime:
                  type: string
                  format: date-time
                  example: 2025-03-29T12:00:00Z
      responses:
        '200':
          description: Screening updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  screening:
                    $ref: '#/components/schemas/Screening'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Screening not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Room already booked for this time slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Screenings]
      summary: Delete screening (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Screening deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Screening not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /booking:
    post:
      tags: [Bookings]
      summary: Book a seat (User only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [screeningId, seat]
              properties:
                screeningId:
                  type: string
                  example: 507f1f77bcf86cd799439011
                seat:
                  type: string
                  pattern: '^[A-Z][1-9][0-9]?$'
                  example: A3
      responses:
        '201':
          description: Seat booked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input or seat format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Screening not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Seat already booked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /booking/mine:
    get:
      tags: [Bookings]
      summary: Get my bookings (User only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  bookings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /booking/{id}:
    get:
      tags: [Bookings]
      summary: Get booking details (User only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                type: object
                properties:
                  booking:
                    $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Bookings]
      summary: Cancel booking (User only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to cancel this booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
